!function(){"use strict";const o=1610402437177,i=`cache${o}`,n=["/client/client.5a812e51.js","/client/inject_styles.5607aec6.js","/client/index.f46531d3.js","/client/index.e83d55fd.js","/client/index.1f41d76e.js","/client/[slug].5bc61e04.js","/client/index.e42c01bd.js","/client/ae-rebrand.94334974.js","/client/about.8a88c31e.js"].concat(["/service-worker-index.html","/apple-touch-icon.png","/css/custom.css","/css/global.css","/css/global.css.map","/css/global.scss","/css/main.css","/favicon.ico","/favicon.png","/icon-32.png","/icon-512.png","/img/ae_logo.svg","/img/ae_logomark.svg","/img/footer_bg_graphic.svg","/img/icons/app_labs.png","/img/icons/featured_star.svg","/img/icons/icon_android.svg","/img/icons/icon_apps.svg","/img/icons/icon_uiux.svg","/img/icons/icon_web.svg","/img/icons/labs_icon.svg","/img/portfolio/desktop/project_screenshot_triton.png","/img/portfolio/icons/icon_c19_counter.png","/img/portfolio/icons/icon_cryptx.png","/img/portfolio/icons/icon_lib_ae_apps.png","/img/portfolio/icons/icon_message_counter.png","/img/portfolio/icons/icon_random_contact.png","/img/portfolio/icons/icon_trip_meter.png","/img/portfolio/icons/icon_triton_player.png","/img/portfolio/icons/icon_triton_player_v1.png","/img/portfolio/mobile/message_counter_screens.png","/img/portfolio/web/uplabs_muyu.png","/manifest.json","/scripts.js"]),s=new Set(n);self.addEventListener("install",(o=>{o.waitUntil(caches.open(i).then((o=>o.addAll(n))).then((()=>{self.skipWaiting()})))})),self.addEventListener("activate",(o=>{o.waitUntil(caches.keys().then((async o=>{for(const n of o)n!==i&&await caches.delete(n);self.clients.claim()})))})),self.addEventListener("fetch",(i=>{if("GET"!==i.request.method||i.request.headers.has("range"))return;const n=new URL(i.request.url),e=n.protocol.startsWith("http"),t=n.hostname===self.location.hostname&&n.port!==self.location.port,c=n.host===self.location.host&&s.has(n.pathname),a="only-if-cached"===i.request.cache&&!c;!e||t||a||i.respondWith((async()=>c&&await caches.match(i.request)||async function(i){const n=await caches.open(`offline${o}`);try{const o=await fetch(i);return n.put(i,o.clone()),o}catch(o){const s=await n.match(i);if(s)return s;throw o}}(i.request))())}))}();
