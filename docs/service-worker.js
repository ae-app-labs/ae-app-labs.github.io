!function(){"use strict";const i=1610689695693,e=`cache${i}`,s=["/client/client.9d51cd43.js","/client/inject_styles.5607aec6.js","/client/index.4c08d3b7.js","/client/index.e83d55fd.js","/client/ScrollTrigger.185c2439.js","/client/index.759077ff.js","/client/[slug].60d40914.js","/client/index.b91501c4.js","/client/ae-branding.b523b2ac.js","/client/about.a89fa554.js"].concat(["/service-worker-index.html","/apple-touch-icon.png","/css/custom.css","/css/global.css","/css/global.css.map","/css/global.scss","/css/main.css","/favicon.ico","/favicon.png","/icon-32.png","/icon-512.png","/img/ae_logo.svg","/img/ae_logomark.svg","/img/case-studies/ae-branding/ae-preview.jpg","/img/case-studies/ae-branding/ae_logo_v0.png","/img/case-studies/ae-branding/ae_logo_v1.jpg","/img/case-studies/ae-branding/ae_logo_v2_bw.jpg","/img/case-studies/ae-branding/ae_logo_v2_color.jpg","/img/footer_bg_graphic.svg","/img/icons/app_labs.png","/img/icons/featured_star.svg","/img/icons/icon_android.svg","/img/icons/icon_apps.svg","/img/icons/icon_uiux.svg","/img/icons/icon_web.svg","/img/icons/labs_icon.svg","/img/portfolio/desktop/project_screenshot_triton.png","/img/portfolio/icons/icon_c19_counter.png","/img/portfolio/icons/icon_cryptx.png","/img/portfolio/icons/icon_lib_ae_apps.png","/img/portfolio/icons/icon_message_counter.png","/img/portfolio/icons/icon_random_contact.png","/img/portfolio/icons/icon_trip_meter.png","/img/portfolio/icons/icon_triton_player.png","/img/portfolio/icons/icon_triton_player_v1.png","/img/portfolio/mobile/message_counter_screens.png","/img/portfolio/web/uplabs_muyu.png","/manifest.json","/scripts.js"]),n=new Set(s);self.addEventListener("install",(i=>{i.waitUntil(caches.open(e).then((i=>i.addAll(s))).then((()=>{self.skipWaiting()})))})),self.addEventListener("activate",(i=>{i.waitUntil(caches.keys().then((async i=>{for(const s of i)s!==e&&await caches.delete(s);self.clients.claim()})))})),self.addEventListener("fetch",(e=>{if("GET"!==e.request.method||e.request.headers.has("range"))return;const s=new URL(e.request.url),o=s.protocol.startsWith("http"),c=s.hostname===self.location.hostname&&s.port!==self.location.port,t=s.host===self.location.host&&n.has(s.pathname),a="only-if-cached"===e.request.cache&&!t;!o||c||a||e.respondWith((async()=>t&&await caches.match(e.request)||async function(e){const s=await caches.open(`offline${i}`);try{const i=await fetch(e);return s.put(e,i.clone()),i}catch(i){const n=await s.match(e);if(n)return n;throw i}}(e.request))())}))}();
