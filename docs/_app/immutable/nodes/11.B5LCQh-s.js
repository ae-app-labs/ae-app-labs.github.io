import{S as Ae,i as Ee,s as je,d as v,v as O,p as Be,w as V,q as De,x as G,a as x,b as s,y as q,c,r as Je,g as d,e as n,h as p,f as K,A as N,k as u,j as o,B as Q,n as X}from"../chunks/6YYQdP7l.js";import"../chunks/IHki7fMi.js";import{f as He}from"../chunks/Bj-qI5M8.js";import{A as Z}from"../chunks/CfrrGK96.js";function We(m){let e,r='<div class="card is-shadowless is-slightly-rounded has-background-info"><div class="card-content"><div class="content"><p class="subtitle is-size-5">Goal: Cover 80% of Java essentials quickly with practice-oriented approach. We will build a Student Management System (Console App) by end of this phase.</p> <p class="is-size-4">Week 1: Java Basics + OOP</p> <p class="is-size-4 mb-4 has-text-weight-bold">Topics</p> <ul><li>JVM, JDK, JRE, main syntax</li> <li>Data types, loops, conditionals</li> <li>Classes, Objects, Methods, Constructors</li> <li>OOP: Encapsulation, Inheritance, Polymorphism</li></ul> <p class="is-size-4 mb-4 has-text-weight-bold">Hands on Projects</p> <ul><li>Simple Calculator</li> <li>Prime Number Checker</li> <li>Shape hierarchy (Circle, Rectangle etc) using interfaces</li></ul> <p class="is-size-4 mb-4 has-text-weight-bold">Assignment</p> <ul><li>Write a program to find factorial, Fibonacci series</li> <li>Implement a Zoo system with Animals using abstraction</li></ul></div></div></div> <div class="card is-shadowless is-slightly-rounded has-background-info mt-2"><div class="card-content"><div class="content"><p class="is-size-4">Week 2: Collections + Java 8 Features</p> <p class="is-size-4 mb-4 has-text-weight-bold">Topics</p> <ul><li>List, Set, Map</li> <li>Generics</li> <li>Streams, Lambdas, Functional Interfaces</li></ul> <p class="is-size-4 mb-4 has-text-weight-bold">Hands on Projects</p> <ul><li>Sort students by marks and names</li> <li>Implement a Phonebook using HashMap</li> <li>Student Management System with sorting &amp; filtering using Streams</li></ul></div></div></div> <div class="card is-shadowless is-slightly-rounded has-background-info mt-2"><div class="card-content"><div class="content"><p class="is-size-4">Week 3: Exceptions + File I/O + Threads Intro</p> <p class="is-size-4 mb-4 has-text-weight-bold">Topics</p> <ul><li>Exception hierarchy, custom exceptions</li> <li>File reading/writing</li> <li>Intro to Threads + Executors</li></ul> <p class="is-size-4 mb-4 has-text-weight-bold">Hands on Projects</p> <ul><li>Create a custom exception for invalid input</li> <li>File-based Banking system</li></ul> <p class="is-size-4 mb-4 has-text-weight-bold">Mini Project</p> <ul><li>Student Management System (Console App)</li> <ul><li>CRUD operations (Add, Update, Delete, View students)</li> <li>File storage for persistence</li> <li>Use OOP principles, Collections, Exception Handling</li></ul></ul></div></div></div>';return{c(){e=o("div"),e.innerHTML=r,this.h()},l(a){e=n(a,"DIV",{class:!0,"data-svelte-h":!0}),p(e)!=="svelte-otkexw"&&(e.innerHTML=r),this.h()},h(){c(e,"class","container")},m(a,h){x(a,e,h)},p:X,d(a){a&&v(e)}}}function Ue(m){let e,r='<div class="card is-shadowless is-slightly-rounded has-background-info"><div class="card-content"><div class="content"><p class="subtitle is-size-5">Goal: Quickly move from REST basics → JPA → Security → Testing. Start to build a Blog Management System, feature by feature.</p> <p class="is-size-4">Week 4: Spring Boot Basics</p> <p class="is-size-4 mb-4 has-text-weight-bold">Topics</p> <ul><li>Inversion of Control (IoC), Spring Beans</li> <li>Auto Configuration</li></ul> <p class="is-size-4 mb-4 has-text-weight-bold">Hands on Projects</p> <ul><li>Create a Hello World API as a Spring Boot Project</li> <li>Basic REST endpoints for posts (GET all, GET by id)</li></ul></div></div></div> <div class="card is-shadowless is-slightly-rounded has-background-info mt-2"><div class="card-content"><div class="content"><p class="is-size-4">Week 5: REST + CRUD + Postman</p> <p class="is-size-4 mb-4 has-text-weight-bold">Topics</p> <ul><li>@RestController, RequestMapping, CRUD</li></ul> <p class="is-size-4 mb-4 has-text-weight-bold">Hands on Projects</p> <ul><li>Add CRUD (Create, Update, Delete) for posts</li> <li>Use Postman for testing</li></ul></div></div></div> <div class="card is-shadowless is-slightly-rounded has-background-info mt-2"><div class="card-content"><div class="content"><p class="is-size-4">Week 6: Database Integration (JPA + Hibernate)</p> <p class="is-size-4 mb-4 has-text-weight-bold">Topics</p> <ul><li>Entities</li> <li>Repositories</li> <li>Relationships</li></ul> <p class="is-size-4 mb-4 has-text-weight-bold">Hands on Projects</p> <ul><li>Connect Blog API to MySQL/H2 Database</li> <li>Implement Pagination, Sorting</li></ul></div></div></div> <div class="card is-shadowless is-slightly-rounded has-background-info mt-2"><div class="card-content"><div class="content"><p class="is-size-4">Week 7: Validation + Error Handling</p> <p class="is-size-4 mb-4 has-text-weight-bold">Topics</p> <ul><li>Bean Validation, @ControllerAdvice</li></ul> <p class="is-size-4 mb-4 has-text-weight-bold">Hands on Projects</p> <ul><li>Add validation to Blog API</li> <li>Implement global exception handling</li></ul></div></div></div> <div class="card is-shadowless is-slightly-rounded has-background-info mt-2"><div class="card-content"><div class="content"><p class="is-size-4">Week 8: Security + JWT Intro</p> <p class="is-size-4 mb-4 has-text-weight-bold">Topics</p> <ul><li>Spring Security basics</li> <li>JWT concept</li></ul> <p class="is-size-4 mb-4 has-text-weight-bold">Hands on Projects</p> <ul><li>Add User Authentication (Basic Auth or JWT intro)</li> <li>Role-based access (admin can delete posts)</li></ul> <p class="is-size-4 mb-4 has-text-weight-bold">Mini Project</p> <ul><li>Blog Management API (CRUD + Validation + DB + Security)</li> <ul><li>Write simple unit tests for service layer</li></ul></ul></div></div></div>';return{c(){e=o("div"),e.innerHTML=r,this.h()},l(a){e=n(a,"DIV",{class:!0,"data-svelte-h":!0}),p(e)!=="svelte-xo563b"&&(e.innerHTML=r),this.h()},h(){c(e,"class","container")},m(a,h){x(a,e,h)},p:X,d(a){a&&v(e)}}}function Re(m){let e,r='<div class="card is-shadowless is-slightly-rounded has-background-info"><div class="card-content"><div class="content"><p class="subtitle is-size-5">Goal: Learn distributed architecture and deploy locally. We will extend the learning with an Order Management System as a microservices-based project.</p> <p class="is-size-4">Week 9: Microservices Basics</p> <p class="is-size-4 mb-4 has-text-weight-bold">Topics</p> <ul><li>Why microservices, Service Discovery (Eureka)</li> <li>Monolith vs. microservices vs. modular monolith.</li> <li>Service boundaries, communication methods (HTTP/REST, messaging basics).</li></ul> <p class="is-size-4 mb-4 has-text-weight-bold">Hands on Projects</p> <ul><li>Split existing blog application into two services:</li> <li>Blog Service (handles blog posts)</li> <li>Auth/User Service</li> <ul><li>Register user (username, email, password).</li> <li>Login and JWT token generation.</li> <li>Setup Spring Security in User Service.</li></ul> <li>Configure different ports for each service (e.g., 8081 &amp; 8082).</li></ul></div></div></div> <div class="card is-shadowless is-slightly-rounded has-background-info mt-2"><div class="card-content"><div class="content"><p class="is-size-4">Week 10: API Gateway + Communication</p> <p class="is-size-4 mb-4 has-text-weight-bold">Topics</p> <ul><li>Spring Cloud Gateway, Feign Client</li></ul> <p class="is-size-4 mb-4 has-text-weight-bold">Hands on Projects</p> <ul><li>Add Gateway and inter-service call (Spring Cloud Gateway)</li> <li>Register with Service Discovery (Eureka)</li> <li>Configure Spring Security in Blog Service to validate JWT tokens issued by User Service.</li> <li>Implement an interceptor or filter in Blog Service for token validation.</li> <li>Restrict blog creation/edit/delete to authenticated users only.</li></ul></div></div></div> <div class="card is-shadowless is-slightly-rounded has-background-info mt-2"><div class="card-content"><div class="content"><p class="is-size-4">Week 11: Resilience &amp; Observability</p> <p class="is-size-4 mb-4 has-text-weight-bold">Topics</p> <ul><li>Circuit Breaker (Resilience4j), Actuator</li></ul> <p class="is-size-4 mb-4 has-text-weight-bold">Hands on Projects</p> <ul><li>Add Feign Client for communication (Order → Product)</li> <li>Implement circuit breaker in one service (Resilience4j)</li> <li>Enhance Blog Service:</li> <ul><li>When listing blogs, show author username by fetching it from User Service.</li> <li>Implement a REST call from Blog Service → User Service to fetch user details.</li></ul></ul></div></div></div> <div class="card is-shadowless is-slightly-rounded has-background-info mt-2"><div class="card-content"><div class="content"><p class="is-size-4">Week 12: Final integration and Testing</p> <p class="is-size-4 mb-4 has-text-weight-bold">Topics</p> <ul><li>Microservice Integration Concepts</li> <li>Service Discovery with Eureka</li> <li>Declarative REST Calls with Feign</li> <li>JWT-Based Authentication Across Services</li> <li>Error Handling &amp; Fallbacks</li></ul> <p class="is-size-4 mb-4 has-text-weight-bold">Hands on Projects</p> <ul><li>Set Up Eureka Server</li> <li>Implement Feign Client in Blog Service</li></ul></div></div></div>';return{c(){e=o("div"),e.innerHTML=r,this.h()},l(a){e=n(a,"DIV",{class:!0,"data-svelte-h":!0}),p(e)!=="svelte-1i9fi2p"&&(e.innerHTML=r),this.h()},h(){c(e,"class","container")},m(a,h){x(a,e,h)},p:X,d(a){a&&v(e)}}}function Le(m){let e,r='<div class="card is-shadowless is-slightly-rounded has-background-info"><div class="card-content"><div class="content"><p>Build a fully functional backend application with User and Blog microservices, using Spring Boot, Feign, and Eureka. Implement JWT-based authentication, secure endpoints, and inter-service communication while handling service failures gracefully. By completing this project, you’ll demonstrate real-world backend development skills, modular architecture, and end-to-end testing.</p> <p class="is-size-4">Project Overview</p> <p>The final project is a realistic, multi-service backend application that demonstrates your ability to design, build, and integrate microservices. It consists of two independent services:</p> <ol><li>User Service – Handles user registration, authentication (JWT), and role management.</li> <li>Blog Service – Manages blog posts, including creating, reading, updating, and deleting blogs. It communicates with User Service to validate users and fetch author information.</li></ol> <p>Both services are registered with a local Eureka server for service discovery, and Feign clients are used for declarative inter-service communication. The project emphasizes security, resilience, and modular design</p> <p class="is-size-4 mb-4 has-text-weight-bold">Key Features to Implement</p> <ul><li>User Service</li> <ul><li>User registration and login with JWT.</li> <li>Role-based access (e.g., admin vs regular user).</li></ul> <li>Blog Service</li> <ul><li>CRUD operations for blogs.</li> <li>Secure endpoints that require JWT authentication.</li> <li>Fetch author information via Feign calls to User Service.</li> <li>Handle failures gracefully when User Service is unavailable (fallback).</li></ul> <li>Integration</li> <ul><li>Services discover each other via Eureka.</li> <li>JWT-based authentication across services.</li> <li>Proper logging and error handling.</li></ul> <li>Testing</li> <ul><li>Unit tests for service logic.</li> <li>Integration tests for inter-service communication.</li> <li>Manual end-to-end testing with Postman.</li></ul></ul> <p class="is-size-4 mb-4 has-text-weight-bold">Project Deliverables</p> <ol><li>Source Code</li> <ul><li>Well-organized repositories for each service.</li> <li>Proper commit history showing incremental development.</li></ul> <li>Documentation</li> <ol><li>README with setup instructions.</li> <li>API documentation for all endpoints.</li> <li>Description of how authentication, inter-service calls, and fallbacks work.</li></ol> <li>Demonstration</li> <ul><li>Run both services locally</li> <ol><li>User registration &amp; login.</li> <li>Creating, updating, and listing blogs with author info.</li> <li>Proper handling when a service is down.</li></ol></ul></ol></div></div></div>';return{c(){e=o("div"),e.innerHTML=r,this.h()},l(a){e=n(a,"DIV",{class:!0,"data-svelte-h":!0}),p(e)!=="svelte-2e1ydl"&&(e.innerHTML=r),this.h()},h(){c(e,"class","container")},m(a,h){x(a,e,h)},p:X,d(a){a&&v(e)}}}function Fe(m){let e,r,a='<div class="container py-6 fadeInUp"><p class="is-size-2 is-family-secondary">Java Spring Microservices Course</p> <p class="is-size-4 stagger2 mt-4"><span class="tag is-primary">Development</span></p></div>',h,F,C,J,b,k,fe='<p><span class="has-text-weight-bold">Duration:</span> 12 Weeks</p> <br/> <ul><li><a href="#phase-1" class="is-link">Phase 1: Java Core (3 weeks)</a></li> <li><a href="#phase-2" class="is-link">Phase 2: Spring Boot + JPA + Security (5 weeks)</a></li> <li><a href="#phase-3" class="is-link">Phase 3: Microservices + Testing (4 weeks)</a></li> <li><a href="#final-project" class="is-link">Final Project</a></li></ul>',Y,i,P,we="Course Description",ee,T,ye="This intensive 3-month course is designed to transform beginners into competent backend developers, guiding them from core Java fundamentals to building scalable microservices using Spring Boot. The course emphasizes hands-on learning, combining theory with real-world projects to ensure practical understanding.",ie,$,Se="Participants will start by mastering Java essentials, including Object-Oriented Programming, Collections, Java 8 features, exception handling, and basic concurrency. They will then progress to Spring Boot, learning to create RESTful APIs, integrate with databases using JPA/Hibernate, implement validation, handle errors, and secure applications with Spring Security.",te,z,xe="The final phase introduces microservices architecture, teaching service discovery, API gateways, inter-service communication, resilience patterns, observability, and containerization with Docker. By the end of the course, students will have developed a fully functional, multi-service backend application, demonstrating their ability to design, build, and deploy modern backend systems.",se,_,Ce="Key Highlights",le,I,ke="<li>Fast-track learning of Java fundamentals in 3 weeks</li> <li>Build multiple real-world projects: To-Do App, Blog Management System, Mini E-commerce System</li> <li>Learn Spring Boot for REST APIs, JPA, and Security</li> <li>Gain hands-on experience with microservices architecture, Spring Cloud, and Docker</li> <li>Emphasis on coding practice, problem-solving, and best industry practices</li>",ae,M,Pe="Ideal for",ne,B,Te="Aspiring backend developers, software engineers looking to strengthen Java and Spring Boot skills, and anyone aiming to become a full-stack developer with a strong backend foundation.",oe,H,$e="Pre-requisites",re,A,ze="<li>Basic understanding of programming concepts (variables, loops, functions).</li> <li>Familiarity with object-oriented concepts (classes, objects, inheritance).</li> <li>A computer with Java 11+ installed.</li> <li>IntelliJ IDEA or Eclipse (or another Java IDE) installed.</li> <li>Git installed and basic commands known (clone, commit, push, branch).</li> <li>Optional: Postman for testing APIs, MySQL or H2 database.</li>",ce,E,_e="Instructions",de,W,Ie='Clone the repo <a href="https://github.com/ae-app-labs/java-spring-microservices" class="is-link" target="_blank">java-spring-microservices</a> and use it to save your work',ue,j,Me="<li>Organize the work by phase and service, e.g., phase1-java-fundamentals, phase2-blog-api, phase3-service-integration.</li> <li>Commit after completing each feature or milestone with clear messages like “Phase2: Blog CRUD operations” or “Phase3: Blog Service Feign integration.”</li> <li>Use feature branches for development and merge into main after testing.</li>",pe,he,ge,f,ve,w,me,y,be,S,U;return f=new Z({props:{title:"Phase 1: Java Core (Weeks 1–3)",id:"phase-1",$$slots:{default:[We]},$$scope:{ctx:m}}}),w=new Z({props:{title:"Phase 2: Spring Boot + JPA + Security (Weeks 4–8)",id:"phase-2",$$slots:{default:[Ue]},$$scope:{ctx:m}}}),y=new Z({props:{title:"Phase 3: Microservices + Testing (Weeks 9–12)",id:"phase-3",$$slots:{default:[Re]},$$scope:{ctx:m}}}),S=new Z({props:{title:"Final Project: Multi-Service Blog Platform",id:"final-project",$$slots:{default:[Le]},$$scope:{ctx:m}}}),{c(){e=u(),r=o("section"),r.innerHTML=a,F=u(),C=o("section"),J=o("div"),b=o("div"),k=o("div"),k.innerHTML=fe,Y=u(),i=o("div"),P=o("p"),P.textContent=we,ee=u(),T=o("p"),T.textContent=ye,ie=u(),$=o("p"),$.textContent=Se,te=u(),z=o("p"),z.textContent=xe,se=u(),_=o("p"),_.textContent=Ce,le=u(),I=o("ul"),I.innerHTML=ke,ae=u(),M=o("p"),M.textContent=Pe,ne=u(),B=o("p"),B.textContent=Te,oe=u(),H=o("p"),H.textContent=$e,re=u(),A=o("ul"),A.innerHTML=ze,ce=u(),E=o("p"),E.textContent=_e,de=u(),W=o("p"),W.innerHTML=Ie,ue=u(),j=o("ul"),j.innerHTML=Me,pe=u(),he=o("br"),ge=u(),Q(f.$$.fragment),ve=u(),Q(w.$$.fragment),me=u(),Q(y.$$.fragment),be=u(),Q(S.$$.fragment),this.h()},l(l){Je("svelte-tvy9v8",document.head).forEach(v),e=d(l),r=n(l,"SECTION",{class:!0,"data-svelte-h":!0}),p(r)!=="svelte-l0gwhc"&&(r.innerHTML=a),F=d(l),C=n(l,"SECTION",{class:!0});var R=K(C);J=n(R,"DIV",{class:!0});var L=K(J);b=n(L,"DIV",{class:!0});var D=K(b);k=n(D,"DIV",{class:!0,"data-svelte-h":!0}),p(k)!=="svelte-1ywnot5"&&(k.innerHTML=fe),Y=d(D),i=n(D,"DIV",{class:!0});var t=K(i);P=n(t,"P",{class:!0,"data-svelte-h":!0}),p(P)!=="svelte-27jeu4"&&(P.textContent=we),ee=d(t),T=n(t,"P",{class:!0,"data-svelte-h":!0}),p(T)!=="svelte-a4m85q"&&(T.textContent=ye),ie=d(t),$=n(t,"P",{class:!0,"data-svelte-h":!0}),p($)!=="svelte-chse76"&&($.textContent=Se),te=d(t),z=n(t,"P",{class:!0,"data-svelte-h":!0}),p(z)!=="svelte-1au7t42"&&(z.textContent=xe),se=d(t),_=n(t,"P",{class:!0,"data-svelte-h":!0}),p(_)!=="svelte-193ofxl"&&(_.textContent=Ce),le=d(t),I=n(t,"UL",{class:!0,"data-svelte-h":!0}),p(I)!=="svelte-7dxvrw"&&(I.innerHTML=ke),ae=d(t),M=n(t,"P",{class:!0,"data-svelte-h":!0}),p(M)!=="svelte-sy4o9n"&&(M.textContent=Pe),ne=d(t),B=n(t,"P",{class:!0,"data-svelte-h":!0}),p(B)!=="svelte-l2lcii"&&(B.textContent=Te),oe=d(t),H=n(t,"P",{class:!0,"data-svelte-h":!0}),p(H)!=="svelte-vzb167"&&(H.textContent=$e),re=d(t),A=n(t,"UL",{class:!0,"data-svelte-h":!0}),p(A)!=="svelte-1l7yuji"&&(A.innerHTML=ze),ce=d(t),E=n(t,"P",{class:!0,"data-svelte-h":!0}),p(E)!=="svelte-179rqoi"&&(E.textContent=_e),de=d(t),W=n(t,"P",{"data-svelte-h":!0}),p(W)!=="svelte-19qld4z"&&(W.innerHTML=Ie),ue=d(t),j=n(t,"UL",{class:!0,"data-svelte-h":!0}),p(j)!=="svelte-1siwcay"&&(j.innerHTML=Me),pe=d(t),he=n(t,"BR",{}),ge=d(t),N(f.$$.fragment,t),ve=d(t),N(w.$$.fragment,t),me=d(t),N(y.$$.fragment,t),be=d(t),N(S.$$.fragment,t),t.forEach(v),D.forEach(v),L.forEach(v),R.forEach(v),this.h()},h(){document.title="ae app labs | Courses | Java Spring Microservices",c(r,"class","section-header banner-bg"),c(k,"class","column is-4"),c(P,"class","is-size-4 mb-4 has-text-weight-bold"),c(T,"class","mb-4"),c($,"class","mb-4"),c(z,"class","mb-4"),c(_,"class","is-size-4 mb-4 has-text-weight-bold"),c(I,"class","mb-4 ml-2"),c(M,"class","is-size-4 mb-4 has-text-weight-bold"),c(B,"class","mb-4"),c(H,"class","is-size-4 mb-4 has-text-weight-bold"),c(A,"class","ml-2"),c(E,"class","is-size-4 mb-4 has-text-weight-bold"),c(j,"class","ml-2"),c(i,"class","column is-8"),c(b,"class","columns"),c(J,"class","container"),c(C,"class","section fadeInUp")},m(l,g){x(l,e,g),x(l,r,g),x(l,F,g),x(l,C,g),s(C,J),s(J,b),s(b,k),s(b,Y),s(b,i),s(i,P),s(i,ee),s(i,T),s(i,ie),s(i,$),s(i,te),s(i,z),s(i,se),s(i,_),s(i,le),s(i,I),s(i,ae),s(i,M),s(i,ne),s(i,B),s(i,oe),s(i,H),s(i,re),s(i,A),s(i,ce),s(i,E),s(i,de),s(i,W),s(i,ue),s(i,j),s(i,pe),s(i,he),s(i,ge),q(f,i,null),s(i,ve),q(w,i,null),s(i,me),q(y,i,null),s(i,be),q(S,i,null),U=!0},p(l,[g]){const R={};g&1&&(R.$$scope={dirty:g,ctx:l}),f.$set(R);const L={};g&1&&(L.$$scope={dirty:g,ctx:l}),w.$set(L);const D={};g&1&&(D.$$scope={dirty:g,ctx:l}),y.$set(D);const t={};g&1&&(t.$$scope={dirty:g,ctx:l}),S.$set(t)},i(l){U||(De(()=>{U&&(h||(h=Be(r,He,{},!0)),h.run(1))}),G(f.$$.fragment,l),G(w.$$.fragment,l),G(y.$$.fragment,l),G(S.$$.fragment,l),U=!0)},o(l){h||(h=Be(r,He,{},!1)),h.run(0),V(f.$$.fragment,l),V(w.$$.fragment,l),V(y.$$.fragment,l),V(S.$$.fragment,l),U=!1},d(l){l&&(v(e),v(r),v(F),v(C)),l&&h&&h.end(),O(f),O(w),O(y),O(S)}}}class Ke extends Ae{constructor(e){super(),Ee(this,e,null,Fe,je,{})}}export{Ke as component};
